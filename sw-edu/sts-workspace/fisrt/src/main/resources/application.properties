spring.application.name=fisrt

# view ì¤ì 
spring.mvc.view.prefix = /WEB-INF/views/
spring.mvc.view.suffix = .jsp

# src/main/webapp/WEB-INF/views/start.jsp

# jpa 설정 - Entity, JPARepo... 메소드 호출 - SQL 동작 원리
# JPA 쿼리문 확인 가능
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.highlight_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true


# drop 후 create
#jpa orm 매핑시 테이블생성 ddl 실행여부 설정
# 기존 테이블이 존재하면 drop 후 create / 기존 테이블이 존재하지 않으면 create
spring.jpa.hibernate.ddl-auto=create


# db설정(jdbc, mybatis, jpa - 연결db정보 설정)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/sdsdb
spring.datasource.username=sds
spring.datasource.password=1234

#swagger
# Swagger-UI의 경로를 /api-test로 설정
springdoc.swagger-ui.path=/api-test

# Swagger-UI에 표시할 API의 엔드포인트 패턴.
# UserController에 @RequestMapping("/swagger") 추가필요
springdoc.paths-to-match=/swagger/**

# API 문서의 경로를 /swagger로 설정.
springdoc.api-docs.path=/swagger

# 문서 요소의 내림차순으로 설정 (path, query, body, response 순서)
#springdoc.swagger-ui.groups-order=DESC

# 태그 알파벳 순서 정렬
#springdoc.swagger-ui.tags-sorter=alpha

# http 메소드이른 순서 정렬(delete - get - patch - post - put)
# alpha 변경시 알파벳 순서
#springdoc.swagger-ui.operations-sorter=method

#특정 패키지의 컨트롤러만 스캔
springdoc.packages-to-scan=swaggertest

